import axios from 'axios';

// Create axios instance with default configuration
const api = axios.create({
    baseURL: '/api', // This will proxy through the backend
    headers: {
        'Content-Type': 'application/json',
    },
});

// Add token to requests if available
api.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

// Handle authentication errors
api.interceptors.response.use(
    (response) => response,
    (error) => {
        if (error.response?.status === 401) {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login';
        }
        return Promise.reject(error);
    }
);

// Authentication API
export const authAPI = {
    login: async (email, password) => {
        const response = await api.post('/auth/login', { email, password });
        return response.data;
    },
    
    register: async (userData) => {
        const response = await api.post('/auth/register', userData);
        return response.data;
    },
};

// Alerts API
export const alertsAPI = {
    getAll: async () => {
        const response = await api.get('/alerts');
        return response.data;
    },
    
    getActive: async () => {
        const response = await api.get('/alerts/active');
        return response.data;
    },
    
    getById: async (id) => {
        const response = await api.get(`/alerts/${id}`);
        return response.data;
    },
    
    create: async (alertData) => {
        const response = await api.post('/alerts', alertData);
        return response.data;
    },
    
    update: async (id, alertData) => {
        const response = await api.put(`/alerts/${id}`, alertData);
        return response.data;
    },
    
    delete: async (id) => {
        const response = await api.delete(`/alerts/${id}`);
        return response.data;
    },
    
    getMine: async () => {
        const response = await api.get('/alerts/my');
        return response.data;
    },
};

// Help Requests API
export const helpRequestsAPI = {
    getAll: async () => {
        const response = await api.get('/helprequests');
        return response.data;
    },
    
    getMy: async () => {
        const response = await api.get('/helprequests/my-requests');
        return response.data;
    },
    
    getById: async (id) => {
        const response = await api.get(`/helprequests/${id}`);
        return response.data;
    },
    
    create: async (requestData) => {
        const response = await api.post('/helprequests', requestData);
        return response.data;
    },
    
    assign: async (id, responderId) => {
        const response = await api.put(`/helprequests/${id}/assign`, { responderId });
        return response.data;
    },
    
    updateStatus: async (id, status) => {
        const response = await api.put(`/helprequests/${id}/status`, { status });
        return response.data;
    },
    
    update: async (id, requestData) => {
        const response = await api.put(`/helprequests/${id}`, requestData);
        return response.data;
    },
    
    delete: async (id) => {
        const response = await api.delete(`/helprequests/${id}`);
        return response.data;
    },
};

// Incidents API
export const incidentsAPI = {
    getAll: async () => {
        const response = await api.get('/incidents');
        return response.data;
    },
    getMine: async () => {
        const response = await api.get('/incidents');
        // Filter on client for now; ideally, backend should support /incidents/my
        const user = JSON.parse(localStorage.getItem('user'));
        return response.data.filter(i => i.reporterName && user && `${user.firstName} ${user.lastName}` === i.reporterName);
    },
    create: async (incidentData) => {
        const response = await api.post('/incidents', incidentData);
        return response.data;
    },
};

// --- Admin User CRUD ---
export const adminUsersAPI = {
  getAll: async () => (await api.get('/admin/users')).data,
  create: async (user) => (await api.post('/admin/users', user)).data,
  update: async (id, user) => (await api.put(`/admin/users/${id}`, user)).data,
  delete: async (id) => (await api.delete(`/admin/users/${id}`)).data,
};

// --- Admin Team CRUD ---
export const adminTeamsAPI = {
  getAll: async () => (await api.get('/admin/teams')).data,
  create: async (team) => (await api.post('/admin/teams', team)).data,
  update: async (id, team) => (await api.put(`/admin/teams/${id}`, team)).data,
  delete: async (id) => (await api.delete(`/admin/teams/${id}`)).data,
};

// --- Admin Incident Filtering & Assignment ---
export const adminIncidentsAPI = {
  getAll: async (filters) => (await api.get('/admin/incidents', { params: filters })).data,
  assignTeam: async (incidentId, teamId) => (await api.put(`/admin/incidents/${incidentId}/assign-team`, teamId)).data,
};

export default api;